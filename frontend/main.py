import sys
import os
import requests
from PySide6.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QTableWidget, QTableWidgetItem,
    QPushButton, QHBoxLayout, QMessageBox, QDialog, QLabel, QLineEdit, QFormLayout,
    QDateEdit, QFileDialog, QComboBox, QAbstractItemView
)
from PySide6.QtCore import Qt, QDate, QSettings, QTimer, QSize
from PySide6.QtGui import QColor, QIcon, QPixmap
from openpyxl import Workbook, load_workbook
from PySide6.QtWidgets import QSplashScreen, QHeaderView

os.chdir(os.path.dirname(__file__))

API_URL = "http://127.0.0.1:8000"
current_user = None

class LoginDialog(QDialog):
    def __init__(self):
        super().__init__()
        self.success = False
        self.setWindowTitle("–í—Ö–æ–¥")
        self.setWindowIcon(QIcon("icon.ico"))
        layout = QVBoxLayout()

        # --- –õ–û–ì–û–¢–ò–ü ---
        logo_label = QLabel()
        logo_label = QLabel()
        pixmap = QPixmap(r"logo.png")

        if not pixmap.isNull():
            logo_label.setPixmap(pixmap.scaledToWidth(300, Qt.SmoothTransformation))
            logo_label.setAlignment(Qt.AlignCenter)
            layout.addWidget(logo_label)
        else:
            print("‚ùå –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø—É—Ç—å: logo.png")

        # --- –§–û–†–ú–ê –õ–û–ì–ò–ù–ê ---
        form_layout = QFormLayout()
        self.login_combo = QComboBox()
        form_layout.addRow("–õ–æ–≥–∏–Ω:", self.login_combo)

        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)
        form_layout.addRow("–ü–∞—Ä–æ–ª—å:", self.password_input)

        layout.addLayout(form_layout)

        self.login_btn = QPushButton("–í–æ–π—Ç–∏")
        self.login_btn.clicked.connect(self.try_login)
        layout.addWidget(self.login_btn)

        self.setLayout(layout)

        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
        self.load_logins()

    def load_logins(self):
        try:
            resp = requests.get(f"{API_URL}/users")
            if resp.status_code == 200:
                logins = resp.json()
                print("Status code:", resp.status_code)
                print("Response text:", resp.text)
                self.login_combo.clear()
                self.login_combo.addItems(logins)
            else:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞")
        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–≥–∏–Ω–æ–≤: {e}")

    def try_login(self):
        global current_user
        login = self.login_combo.currentText().strip()
        password = self.password_input.text().strip()
        if not login or not password:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å")
            return

        try:
            resp = requests.post(f"{API_URL}/auth", json={"login": login, "password": password})
            if resp.status_code == 200:
                current_user = login
                self.success = True
                self.accept()
            else:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", str(e))


status_colors = {
    "–ù–æ–≤—ã–π": QColor("lightgreen"),
    "–í —Ä–∞–±–æ—Ç–µ": QColor("gold"),
    "–û–∂–∏–¥–∞–µ—Ç": QColor("lightblue"),
    "–ó–∞–∫—Ä—ã—Ç": QColor("lightgray")
}

status_icons = {
    "–ù–æ–≤—ã–π": "üü¢",
    "–í —Ä–∞–±–æ—Ç–µ": "üõ†",
    "–û–∂–∏–¥–∞–µ—Ç": "‚è≥",
    "–ó–∞–∫—Ä—ã—Ç": "‚úÖ"
}

# [...] –û–ü–£–©–ï–ù–û –î–õ–Ø –ö–†–ê–¢–ö–û–°–¢–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

    def adjust_table(self):
        header = self.table.horizontalHeader()
        settings = QSettings("MyCompany", "ReclamaciaApp")

        settings.beginGroup(f"column_widths/{current_user}")
        for i in range(self.table.columnCount()):
            width = settings.value(f"col_{i}", type=int)
            if width:
                self.table.setColumnWidth(i, width)
            else:
                header.setSectionResizeMode(i, QHeaderView.ResizeToContents)
        settings.endGroup()

        for i in range(self.table.columnCount()):
            header.setSectionResizeMode(i, QHeaderView.Interactive)

        self.table.setColumnWidth(0, 10)    # ID
        self.table.setColumnWidth(1, 85)    # –î–∞—Ç–∞
        self.table.setColumnWidth(2, 180)   # ‚Ññ –ö–∞—Ä—Ç—ã
        self.table.setColumnWidth(3, 120)   # –§–∞–º–∏–ª–∏—è
        self.table.setColumnWidth(4, 100)   # –ò–º—è
        self.table.setColumnWidth(5, 110)   # –û—Ç—á–µ—Å—Ç–≤–æ
        self.table.setColumnWidth(8, 110)   # –°—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
        self.table.setColumnWidth(10, 100)  # –°—Ç–∞—Ç—É—Å

        for col in [6, 7, 9, 11]:
            header.setSectionResizeMode(col, QHeaderView.Stretch)

        self.table.resizeRowsToContents()
        self.table.verticalHeader().setDefaultSectionSize(22)  # üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ: —É–º–µ–Ω—å—à–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã —Å—Ç—Ä–æ–∫